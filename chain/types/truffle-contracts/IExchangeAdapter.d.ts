/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IExchangeAdapterContract
  extends Truffle.Contract<IExchangeAdapterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IExchangeAdapterInstance>;
}

type AllEvents = never;

export interface IExchangeAdapterInstance extends Truffle.ContractInstance {
  getName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  quote(
    amountA: number | BN | string,
    reserveA: number | BN | string,
    reserveB: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountOut(
    amountIn: number | BN | string,
    reserveIn: number | BN | string,
    reserveOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountIn(
    amountOut: number | BN | string,
    reserveIn: number | BN | string,
    reserveOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountOutByTokenPair(
    amountIn: number | BN | string,
    tokenIn: string,
    tokenOut: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  swapExactTokensForTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  destroy: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    getName(txDetails?: Truffle.TransactionDetails): Promise<string>;

    quote(
      amountA: number | BN | string,
      reserveA: number | BN | string,
      reserveB: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAmountOut(
      amountIn: number | BN | string,
      reserveIn: number | BN | string,
      reserveOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAmountIn(
      amountOut: number | BN | string,
      reserveIn: number | BN | string,
      reserveOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAmountOutByTokenPair(
      amountIn: number | BN | string,
      tokenIn: string,
      tokenOut: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    swapExactTokensForTokens: {
      (
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    destroy: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
