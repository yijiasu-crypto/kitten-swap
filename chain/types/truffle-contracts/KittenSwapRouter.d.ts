/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface KittenSwapRouterContract
  extends Truffle.Contract<KittenSwapRouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<KittenSwapRouterInstance>;
}

type AllEvents = never;

export interface KittenSwapRouterInstance extends Truffle.ContractInstance {
  _adapters(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAdapterCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAdapterNameByIndex(
    idx: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAdapterAddressByIndex(
    idx: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  addNewAdapter: {
    (adapterAddr: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      adapterAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      adapterAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      adapterAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBestQuote(
    tokenIn: string,
    tokenOut: string,
    amountIn: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  swapExactTokensForTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _adapters(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAdapterCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAdapterNameByIndex(
      idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAdapterAddressByIndex(
      idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    addNewAdapter: {
      (adapterAddr: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        adapterAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        adapterAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        adapterAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBestQuote(
      tokenIn: string,
      tokenOut: string,
      amountIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    swapExactTokensForTokens: {
      (
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
